// StreamGame RPC Stream Messages

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: rpc_stream_game.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlayerJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerName string `protobuf:"bytes,1,opt,name=playerName,proto3" json:"playerName,omitempty"`
}

func (x *PlayerJoin) Reset() {
	*x = PlayerJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_stream_game_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerJoin) ProtoMessage() {}

func (x *PlayerJoin) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_stream_game_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerJoin.ProtoReflect.Descriptor instead.
func (*PlayerJoin) Descriptor() ([]byte, []int) {
	return file_rpc_stream_game_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerJoin) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

type PlayerLeave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerName string `protobuf:"bytes,1,opt,name=playerName,proto3" json:"playerName,omitempty"`
}

func (x *PlayerLeave) Reset() {
	*x = PlayerLeave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_stream_game_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerLeave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerLeave) ProtoMessage() {}

func (x *PlayerLeave) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_stream_game_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerLeave.ProtoReflect.Descriptor instead.
func (*PlayerLeave) Descriptor() ([]byte, []int) {
	return file_rpc_stream_game_proto_rawDescGZIP(), []int{1}
}

func (x *PlayerLeave) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

type PlayerDisconnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerName string `protobuf:"bytes,1,opt,name=playerName,proto3" json:"playerName,omitempty"`
}

func (x *PlayerDisconnect) Reset() {
	*x = PlayerDisconnect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_stream_game_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerDisconnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerDisconnect) ProtoMessage() {}

func (x *PlayerDisconnect) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_stream_game_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerDisconnect.ProtoReflect.Descriptor instead.
func (*PlayerDisconnect) Descriptor() ([]byte, []int) {
	return file_rpc_stream_game_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerDisconnect) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

type RoundStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNumber int32  `protobuf:"varint,1,opt,name=roundNumber,proto3" json:"roundNumber,omitempty"`
	Question    string `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
	InputFile   []byte `protobuf:"bytes,3,opt,name=inputFile,proto3" json:"inputFile,omitempty"`
	OutputFile  []byte `protobuf:"bytes,4,opt,name=outputFile,proto3" json:"outputFile,omitempty"`
}

func (x *RoundStart) Reset() {
	*x = RoundStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_stream_game_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundStart) ProtoMessage() {}

func (x *RoundStart) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_stream_game_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundStart.ProtoReflect.Descriptor instead.
func (*RoundStart) Descriptor() ([]byte, []int) {
	return file_rpc_stream_game_proto_rawDescGZIP(), []int{3}
}

func (x *RoundStart) GetRoundNumber() int32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *RoundStart) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *RoundStart) GetInputFile() []byte {
	if x != nil {
		return x.InputFile
	}
	return nil
}

func (x *RoundStart) GetOutputFile() []byte {
	if x != nil {
		return x.OutputFile
	}
	return nil
}

type RoundOver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNumber int32                        `protobuf:"varint,1,opt,name=roundNumber,proto3" json:"roundNumber,omitempty"`
	Stats       map[string]*PlayerRoundStats `protobuf:"bytes,2,rep,name=stats,proto3" json:"stats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Player name to stats
}

func (x *RoundOver) Reset() {
	*x = RoundOver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_stream_game_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundOver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundOver) ProtoMessage() {}

func (x *RoundOver) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_stream_game_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundOver.ProtoReflect.Descriptor instead.
func (*RoundOver) Descriptor() ([]byte, []int) {
	return file_rpc_stream_game_proto_rawDescGZIP(), []int{4}
}

func (x *RoundOver) GetRoundNumber() int32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *RoundOver) GetStats() map[string]*PlayerRoundStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type RoundTimeSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNumber int32                  `protobuf:"varint,1,opt,name=roundNumber,proto3" json:"roundNumber,omitempty"`
	TimeLeft    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timeLeft,proto3" json:"timeLeft,omitempty"`
}

func (x *RoundTimeSync) Reset() {
	*x = RoundTimeSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_stream_game_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundTimeSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundTimeSync) ProtoMessage() {}

func (x *RoundTimeSync) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_stream_game_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundTimeSync.ProtoReflect.Descriptor instead.
func (*RoundTimeSync) Descriptor() ([]byte, []int) {
	return file_rpc_stream_game_proto_rawDescGZIP(), []int{5}
}

func (x *RoundTimeSync) GetRoundNumber() int32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *RoundTimeSync) GetTimeLeft() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeLeft
	}
	return nil
}

type RoundReadyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNumber int32 `protobuf:"varint,1,opt,name=roundNumber,proto3" json:"roundNumber,omitempty"`
}

func (x *RoundReadyRequest) Reset() {
	*x = RoundReadyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_stream_game_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundReadyRequest) ProtoMessage() {}

func (x *RoundReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_stream_game_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundReadyRequest.ProtoReflect.Descriptor instead.
func (*RoundReadyRequest) Descriptor() ([]byte, []int) {
	return file_rpc_stream_game_proto_rawDescGZIP(), []int{6}
}

func (x *RoundReadyRequest) GetRoundNumber() int32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

type GameStatusUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status GameStatus `protobuf:"varint,1,opt,name=status,proto3,enum=proto.GameStatus" json:"status,omitempty"`
}

func (x *GameStatusUpdate) Reset() {
	*x = GameStatusUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_stream_game_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameStatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStatusUpdate) ProtoMessage() {}

func (x *GameStatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_stream_game_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStatusUpdate.ProtoReflect.Descriptor instead.
func (*GameStatusUpdate) Descriptor() ([]byte, []int) {
	return file_rpc_stream_game_proto_rawDescGZIP(), []int{7}
}

func (x *GameStatusUpdate) GetStatus() GameStatus {
	if x != nil {
		return x.Status
	}
	return GameStatus_NotStarted
}

type GameDone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results map[string]int32 `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // Player name to score
}

func (x *GameDone) Reset() {
	*x = GameDone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_stream_game_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameDone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameDone) ProtoMessage() {}

func (x *GameDone) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_stream_game_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameDone.ProtoReflect.Descriptor instead.
func (*GameDone) Descriptor() ([]byte, []int) {
	return file_rpc_stream_game_proto_rawDescGZIP(), []int{8}
}

func (x *GameDone) GetResults() map[string]int32 {
	if x != nil {
		return x.Results
	}
	return nil
}

// -- Sent by server
type GameEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*GameEvent_PlayerJoin
	//	*GameEvent_PlayerLeave
	//	*GameEvent_PlayerDisconnect
	//	*GameEvent_RoundStart
	//	*GameEvent_RoundOver
	//	*GameEvent_RoundReadyRequest
	//	*GameEvent_RoundTimeSync
	//	*GameEvent_StatusUpdate
	//	*GameEvent_GameDone
	Event isGameEvent_Event `protobuf_oneof:"event"`
}

func (x *GameEvent) Reset() {
	*x = GameEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_stream_game_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent) ProtoMessage() {}

func (x *GameEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_stream_game_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent.ProtoReflect.Descriptor instead.
func (*GameEvent) Descriptor() ([]byte, []int) {
	return file_rpc_stream_game_proto_rawDescGZIP(), []int{9}
}

func (m *GameEvent) GetEvent() isGameEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *GameEvent) GetPlayerJoin() *PlayerJoin {
	if x, ok := x.GetEvent().(*GameEvent_PlayerJoin); ok {
		return x.PlayerJoin
	}
	return nil
}

func (x *GameEvent) GetPlayerLeave() *PlayerLeave {
	if x, ok := x.GetEvent().(*GameEvent_PlayerLeave); ok {
		return x.PlayerLeave
	}
	return nil
}

func (x *GameEvent) GetPlayerDisconnect() *PlayerDisconnect {
	if x, ok := x.GetEvent().(*GameEvent_PlayerDisconnect); ok {
		return x.PlayerDisconnect
	}
	return nil
}

func (x *GameEvent) GetRoundStart() *RoundStart {
	if x, ok := x.GetEvent().(*GameEvent_RoundStart); ok {
		return x.RoundStart
	}
	return nil
}

func (x *GameEvent) GetRoundOver() *RoundOver {
	if x, ok := x.GetEvent().(*GameEvent_RoundOver); ok {
		return x.RoundOver
	}
	return nil
}

func (x *GameEvent) GetRoundReadyRequest() *RoundReadyRequest {
	if x, ok := x.GetEvent().(*GameEvent_RoundReadyRequest); ok {
		return x.RoundReadyRequest
	}
	return nil
}

func (x *GameEvent) GetRoundTimeSync() *RoundTimeSync {
	if x, ok := x.GetEvent().(*GameEvent_RoundTimeSync); ok {
		return x.RoundTimeSync
	}
	return nil
}

func (x *GameEvent) GetStatusUpdate() *GameStatusUpdate {
	if x, ok := x.GetEvent().(*GameEvent_StatusUpdate); ok {
		return x.StatusUpdate
	}
	return nil
}

func (x *GameEvent) GetGameDone() *GameDone {
	if x, ok := x.GetEvent().(*GameEvent_GameDone); ok {
		return x.GameDone
	}
	return nil
}

type isGameEvent_Event interface {
	isGameEvent_Event()
}

type GameEvent_PlayerJoin struct {
	PlayerJoin *PlayerJoin `protobuf:"bytes,1,opt,name=playerJoin,proto3,oneof"`
}

type GameEvent_PlayerLeave struct {
	PlayerLeave *PlayerLeave `protobuf:"bytes,2,opt,name=playerLeave,proto3,oneof"`
}

type GameEvent_PlayerDisconnect struct {
	PlayerDisconnect *PlayerDisconnect `protobuf:"bytes,3,opt,name=playerDisconnect,proto3,oneof"`
}

type GameEvent_RoundStart struct {
	RoundStart *RoundStart `protobuf:"bytes,4,opt,name=roundStart,proto3,oneof"`
}

type GameEvent_RoundOver struct {
	RoundOver *RoundOver `protobuf:"bytes,5,opt,name=roundOver,proto3,oneof"`
}

type GameEvent_RoundReadyRequest struct {
	RoundReadyRequest *RoundReadyRequest `protobuf:"bytes,6,opt,name=roundReadyRequest,proto3,oneof"`
}

type GameEvent_RoundTimeSync struct {
	RoundTimeSync *RoundTimeSync `protobuf:"bytes,7,opt,name=roundTimeSync,proto3,oneof"`
}

type GameEvent_StatusUpdate struct {
	StatusUpdate *GameStatusUpdate `protobuf:"bytes,8,opt,name=statusUpdate,proto3,oneof"`
}

type GameEvent_GameDone struct {
	GameDone *GameDone `protobuf:"bytes,9,opt,name=gameDone,proto3,oneof"`
}

func (*GameEvent_PlayerJoin) isGameEvent_Event() {}

func (*GameEvent_PlayerLeave) isGameEvent_Event() {}

func (*GameEvent_PlayerDisconnect) isGameEvent_Event() {}

func (*GameEvent_RoundStart) isGameEvent_Event() {}

func (*GameEvent_RoundOver) isGameEvent_Event() {}

func (*GameEvent_RoundReadyRequest) isGameEvent_Event() {}

func (*GameEvent_RoundTimeSync) isGameEvent_Event() {}

func (*GameEvent_StatusUpdate) isGameEvent_Event() {}

func (*GameEvent_GameDone) isGameEvent_Event() {}

// -- Sent by client
type GameEventAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Ack:
	//
	//	*GameEventAck_ReadyForNextRound
	Ack isGameEventAck_Ack `protobuf_oneof:"ack"`
}

func (x *GameEventAck) Reset() {
	*x = GameEventAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_stream_game_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEventAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEventAck) ProtoMessage() {}

func (x *GameEventAck) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_stream_game_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEventAck.ProtoReflect.Descriptor instead.
func (*GameEventAck) Descriptor() ([]byte, []int) {
	return file_rpc_stream_game_proto_rawDescGZIP(), []int{10}
}

func (m *GameEventAck) GetAck() isGameEventAck_Ack {
	if m != nil {
		return m.Ack
	}
	return nil
}

func (x *GameEventAck) GetReadyForNextRound() bool {
	if x, ok := x.GetAck().(*GameEventAck_ReadyForNextRound); ok {
		return x.ReadyForNextRound
	}
	return false
}

type isGameEventAck_Ack interface {
	isGameEventAck_Ack()
}

type GameEventAck_ReadyForNextRound struct {
	ReadyForNextRound bool `protobuf:"varint,1,opt,name=readyForNextRound,proto3,oneof"`
}

func (*GameEventAck_ReadyForNextRound) isGameEventAck_Ack() {}

var File_rpc_stream_game_proto protoreflect.FileDescriptor

var file_rpc_stream_game_proto_rawDesc = []byte{
	0x0a, 0x15, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x2c, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x2d, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x32,
	0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x22, 0xb3, 0x01,
	0x0a, 0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x1a, 0x51, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x69, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x79, 0x6e, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x65,
	0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x22, 0x35,
	0x0a, 0x11, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x3d, 0x0a, 0x10, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x7e, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x6f, 0x6e, 0x65,
	0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x6f,
	0x6e, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xa5, 0x04, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12,
	0x45, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x48, 0x00, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x76, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x48, 0x0a,
	0x11, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x79, 0x6e, 0x63, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x44, 0x6f, 0x6e, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x44,
	0x6f, 0x6e, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x45, 0x0a, 0x0c,
	0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x11,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x46, 0x6f, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x05, 0x0a, 0x03,
	0x61, 0x63, 0x6b, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6d, 0x61, 0x72, 0x69, 0x61, 0x2d, 0x6d, 0x7a, 0x2f, 0x62, 0x61, 0x73, 0x68, 0x2d,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_stream_game_proto_rawDescOnce sync.Once
	file_rpc_stream_game_proto_rawDescData = file_rpc_stream_game_proto_rawDesc
)

func file_rpc_stream_game_proto_rawDescGZIP() []byte {
	file_rpc_stream_game_proto_rawDescOnce.Do(func() {
		file_rpc_stream_game_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_stream_game_proto_rawDescData)
	})
	return file_rpc_stream_game_proto_rawDescData
}

var file_rpc_stream_game_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_rpc_stream_game_proto_goTypes = []interface{}{
	(*PlayerJoin)(nil),            // 0: proto.PlayerJoin
	(*PlayerLeave)(nil),           // 1: proto.PlayerLeave
	(*PlayerDisconnect)(nil),      // 2: proto.PlayerDisconnect
	(*RoundStart)(nil),            // 3: proto.RoundStart
	(*RoundOver)(nil),             // 4: proto.RoundOver
	(*RoundTimeSync)(nil),         // 5: proto.RoundTimeSync
	(*RoundReadyRequest)(nil),     // 6: proto.RoundReadyRequest
	(*GameStatusUpdate)(nil),      // 7: proto.GameStatusUpdate
	(*GameDone)(nil),              // 8: proto.GameDone
	(*GameEvent)(nil),             // 9: proto.GameEvent
	(*GameEventAck)(nil),          // 10: proto.GameEventAck
	nil,                           // 11: proto.RoundOver.StatsEntry
	nil,                           // 12: proto.GameDone.ResultsEntry
	(*timestamppb.Timestamp)(nil), // 13: google.protobuf.Timestamp
	(GameStatus)(0),               // 14: proto.GameStatus
	(*PlayerRoundStats)(nil),      // 15: proto.PlayerRoundStats
}
var file_rpc_stream_game_proto_depIdxs = []int32{
	11, // 0: proto.RoundOver.stats:type_name -> proto.RoundOver.StatsEntry
	13, // 1: proto.RoundTimeSync.timeLeft:type_name -> google.protobuf.Timestamp
	14, // 2: proto.GameStatusUpdate.status:type_name -> proto.GameStatus
	12, // 3: proto.GameDone.results:type_name -> proto.GameDone.ResultsEntry
	0,  // 4: proto.GameEvent.playerJoin:type_name -> proto.PlayerJoin
	1,  // 5: proto.GameEvent.playerLeave:type_name -> proto.PlayerLeave
	2,  // 6: proto.GameEvent.playerDisconnect:type_name -> proto.PlayerDisconnect
	3,  // 7: proto.GameEvent.roundStart:type_name -> proto.RoundStart
	4,  // 8: proto.GameEvent.roundOver:type_name -> proto.RoundOver
	6,  // 9: proto.GameEvent.roundReadyRequest:type_name -> proto.RoundReadyRequest
	5,  // 10: proto.GameEvent.roundTimeSync:type_name -> proto.RoundTimeSync
	7,  // 11: proto.GameEvent.statusUpdate:type_name -> proto.GameStatusUpdate
	8,  // 12: proto.GameEvent.gameDone:type_name -> proto.GameDone
	15, // 13: proto.RoundOver.StatsEntry.value:type_name -> proto.PlayerRoundStats
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_rpc_stream_game_proto_init() }
func file_rpc_stream_game_proto_init() {
	if File_rpc_stream_game_proto != nil {
		return
	}
	file_composable_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_rpc_stream_game_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_stream_game_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerLeave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_stream_game_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerDisconnect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_stream_game_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_stream_game_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundOver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_stream_game_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundTimeSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_stream_game_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundReadyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_stream_game_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameStatusUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_stream_game_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameDone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_stream_game_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_stream_game_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEventAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rpc_stream_game_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*GameEvent_PlayerJoin)(nil),
		(*GameEvent_PlayerLeave)(nil),
		(*GameEvent_PlayerDisconnect)(nil),
		(*GameEvent_RoundStart)(nil),
		(*GameEvent_RoundOver)(nil),
		(*GameEvent_RoundReadyRequest)(nil),
		(*GameEvent_RoundTimeSync)(nil),
		(*GameEvent_StatusUpdate)(nil),
		(*GameEvent_GameDone)(nil),
	}
	file_rpc_stream_game_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*GameEventAck_ReadyForNextRound)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_stream_game_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rpc_stream_game_proto_goTypes,
		DependencyIndexes: file_rpc_stream_game_proto_depIdxs,
		MessageInfos:      file_rpc_stream_game_proto_msgTypes,
	}.Build()
	File_rpc_stream_game_proto = out.File
	file_rpc_stream_game_proto_rawDesc = nil
	file_rpc_stream_game_proto_goTypes = nil
	file_rpc_stream_game_proto_depIdxs = nil
}
