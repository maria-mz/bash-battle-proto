// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BashBattleClient is the client API for BashBattle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BashBattleClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error)
	GetGameConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (*JoinGameResponse, error)
	LeaveGame(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	StreamGame(ctx context.Context, opts ...grpc.CallOption) (BashBattle_StreamGameClient, error)
}

type bashBattleClient struct {
	cc grpc.ClientConnInterface
}

func NewBashBattleClient(cc grpc.ClientConnInterface) BashBattleClient {
	return &bashBattleClient{cc}
}

func (c *bashBattleClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/proto.BashBattle/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bashBattleClient) CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error) {
	out := new(CreateGameResponse)
	err := c.cc.Invoke(ctx, "/proto.BashBattle/CreateGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bashBattleClient) GetGameConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/proto.BashBattle/GetGameConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bashBattleClient) JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (*JoinGameResponse, error) {
	out := new(JoinGameResponse)
	err := c.cc.Invoke(ctx, "/proto.BashBattle/JoinGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bashBattleClient) LeaveGame(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/proto.BashBattle/LeaveGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bashBattleClient) StreamGame(ctx context.Context, opts ...grpc.CallOption) (BashBattle_StreamGameClient, error) {
	stream, err := c.cc.NewStream(ctx, &BashBattle_ServiceDesc.Streams[0], "/proto.BashBattle/StreamGame", opts...)
	if err != nil {
		return nil, err
	}
	x := &bashBattleStreamGameClient{stream}
	return x, nil
}

type BashBattle_StreamGameClient interface {
	Send(*GameEventAck) error
	Recv() (*GameEvent, error)
	grpc.ClientStream
}

type bashBattleStreamGameClient struct {
	grpc.ClientStream
}

func (x *bashBattleStreamGameClient) Send(m *GameEventAck) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bashBattleStreamGameClient) Recv() (*GameEvent, error) {
	m := new(GameEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BashBattleServer is the server API for BashBattle service.
// All implementations must embed UnimplementedBashBattleServer
// for forward compatibility
type BashBattleServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	CreateGame(context.Context, *CreateGameRequest) (*CreateGameResponse, error)
	GetGameConfig(context.Context, *ConfigRequest) (*ConfigResponse, error)
	JoinGame(context.Context, *JoinGameRequest) (*JoinGameResponse, error)
	LeaveGame(context.Context, *EmptyMessage) (*EmptyMessage, error)
	StreamGame(BashBattle_StreamGameServer) error
	mustEmbedUnimplementedBashBattleServer()
}

// UnimplementedBashBattleServer must be embedded to have forward compatible implementations.
type UnimplementedBashBattleServer struct {
}

func (UnimplementedBashBattleServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedBashBattleServer) CreateGame(context.Context, *CreateGameRequest) (*CreateGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (UnimplementedBashBattleServer) GetGameConfig(context.Context, *ConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameConfig not implemented")
}
func (UnimplementedBashBattleServer) JoinGame(context.Context, *JoinGameRequest) (*JoinGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGame not implemented")
}
func (UnimplementedBashBattleServer) LeaveGame(context.Context, *EmptyMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGame not implemented")
}
func (UnimplementedBashBattleServer) StreamGame(BashBattle_StreamGameServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamGame not implemented")
}
func (UnimplementedBashBattleServer) mustEmbedUnimplementedBashBattleServer() {}

// UnsafeBashBattleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BashBattleServer will
// result in compilation errors.
type UnsafeBashBattleServer interface {
	mustEmbedUnimplementedBashBattleServer()
}

func RegisterBashBattleServer(s grpc.ServiceRegistrar, srv BashBattleServer) {
	s.RegisterService(&BashBattle_ServiceDesc, srv)
}

func _BashBattle_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BashBattleServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BashBattle/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BashBattleServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BashBattle_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BashBattleServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BashBattle/CreateGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BashBattleServer).CreateGame(ctx, req.(*CreateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BashBattle_GetGameConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BashBattleServer).GetGameConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BashBattle/GetGameConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BashBattleServer).GetGameConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BashBattle_JoinGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BashBattleServer).JoinGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BashBattle/JoinGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BashBattleServer).JoinGame(ctx, req.(*JoinGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BashBattle_LeaveGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BashBattleServer).LeaveGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BashBattle/LeaveGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BashBattleServer).LeaveGame(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BashBattle_StreamGame_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BashBattleServer).StreamGame(&bashBattleStreamGameServer{stream})
}

type BashBattle_StreamGameServer interface {
	Send(*GameEvent) error
	Recv() (*GameEventAck, error)
	grpc.ServerStream
}

type bashBattleStreamGameServer struct {
	grpc.ServerStream
}

func (x *bashBattleStreamGameServer) Send(m *GameEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bashBattleStreamGameServer) Recv() (*GameEventAck, error) {
	m := new(GameEventAck)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BashBattle_ServiceDesc is the grpc.ServiceDesc for BashBattle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BashBattle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BashBattle",
	HandlerType: (*BashBattleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _BashBattle_Login_Handler,
		},
		{
			MethodName: "CreateGame",
			Handler:    _BashBattle_CreateGame_Handler,
		},
		{
			MethodName: "GetGameConfig",
			Handler:    _BashBattle_GetGameConfig_Handler,
		},
		{
			MethodName: "JoinGame",
			Handler:    _BashBattle_JoinGame_Handler,
		},
		{
			MethodName: "LeaveGame",
			Handler:    _BashBattle_LeaveGame_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGame",
			Handler:       _BashBattle_StreamGame_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
